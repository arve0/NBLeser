"use strict";var ApplicationConfiguration=function(){var applicationModuleName="nbleser",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("leser"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$rootScope","Menus","$anchorScroll","$location",function($scope,$rootScope,Menus,$anchorScroll,$location){$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.goto=function(page){console.log("going to: ",page),$location.hash(page),$anchorScroll()}}]),angular.module("core").controller("HomeController",["$scope","$location","$rootScope",function($scope,$location,$rootScope){$scope.les=function(urn){$location.url("/leser/"+urn)},$rootScope.controls={},$rootScope.controls.show=!1}]),angular.module("core").service("Menus",[function(){this.menus={},this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId){return this.menus[menuId]={items:[]},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemUIRoute){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL}),this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("leser").config(["$stateProvider",function($stateProvider){$stateProvider.state("/leser",{url:"/leser/:urn",templateUrl:"modules/leser/views/leser.client.view.html"})}]),angular.module("leser").controller("LeserController",["$scope","$rootScope","Tilemap","$document","$stateParams",function($scope,$rootScope,Tilemap,$document,$stateParams){var urn=$stateParams.urn,pagePromise=Tilemap.getPages(urn);$rootScope.controls={},$rootScope.controls.show=!0,$rootScope.controls.level=5,$rootScope.controls.zoom=100,$rootScope.controls.zoomValues=[];for(var z=10;100>=z;z+=10)$rootScope.controls.zoomValues.push({value:z,text:z+"%"});$rootScope.$watch("controls.zoom",function(value){$scope.width=function(){return{width:value+"%",height:value+"%"}}}),$scope.scrollTop={},$scope.scrollTop.value=0,$document.on("scroll",function(){$scope.scrollTop.value=(window.pageYOffset||this.scrollTop||0)-(this.clientTop||0),$scope.$digest()}),$scope.show=function(windowPosition,elementPosition){return Math.abs(windowPosition-elementPosition)<5e3},pagePromise.then(function(pages){$scope.pages=pages,$rootScope.controls.levels=[];for(var i=0;i<pages.getNumberOfLevels();i++)$rootScope.controls.levels.push(i);$scope.pages.updateLevel($rootScope.controls.level),$rootScope.$watch("controls.level",function(level){$scope.pages.updateLevel(level)})})}]),angular.module("leser").directive("pageHeight",["$timeout",function($timeout){return{link:function(scope,element){function setHeight(){var realWidth=element.prop("offsetWidth"),sourceWidth=scope.page.currentLevel.width,zoom=realWidth/sourceWidth,height=Math.ceil(scope.page.currentLevel.height*zoom);element.css("height",height+"px"),scope.page.offsetTop=element.prop("offsetTop")}scope.$watch("controls.zoom",function(){$timeout(setHeight)})}}}]),angular.module("leser").factory("Tilemap",["$http","$timeout","$q",function($http,$timeout,$q){var _pages,updateLevel=function(level){angular.forEach(_pages,function(page){page.currentLevel=page.tileMap.levels[level]})},getNumberOfLevels=function(){return _pages[0].tileMap.levels.length},getPages=function(urn){_pages=[],_pages.updateLevel=updateLevel,_pages.getNumberOfLevels=getNumberOfLevels;var deferred=$q.defer();return $http.get("/tilemap/"+urn).success(function(data){angular.forEach(data.pages.pages,function(page,index){_pages.push({pageId:page.pg_id,pageLabel:page.pg_label,pageType:page.pg_type,resolution:page.resolution,tileHeight:page.tileHeight,tileMap:page.tileMap.image.pyramid}),angular.forEach(_pages[index].tileMap.levels,function(level){var templateUrl=level.uri.template;level.images=[];var pixels,tileHeight=_pages[index].tileMap.tileHeight,tileWidth=_pages[index].tileMap.tileWidth;level.height>tileHeight&&(pixels=level.height-(level.rows-1)*tileHeight,level.lastRowScale=pixels/tileHeight),level.width>tileWidth&&(pixels=level.width-(level.columns-1)*tileWidth,level.lastColumnScale=pixels/tileWidth);for(var i=0;i<level.rows;i++){level.images.push([]);for(var j=0;j<level.columns;j++){var url=templateUrl.replace("{row}",i).replace("{column}",j);level.images[i].push(url)}}})}),deferred.resolve(_pages)}),deferred.promise};return{getPages:getPages}}]);